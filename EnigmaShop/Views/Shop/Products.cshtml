@using Microsoft.AspNetCore.Http
@model EnigmaShop.ViewModels.ShopViewModel


<div class="jumbotron">
    <div class="container">
        <h1>
            Shop
        </h1>

    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-lg-4">
            <div class="categories">
                @foreach (var primaryCat in Model.Categories)
                {
                    <a asp-route-primaryCat="@primaryCat.Name"><h4 class="d-block">@primaryCat.Name</h4></a>

                    foreach (var secondaryCat in primaryCat.Categories)
                    {
                        <ul class="list-style-none">
                            <li>
                                <a asp-route-primaryCat="@primaryCat.Name" asp-route-secondaryCat="@secondaryCat.Name">@secondaryCat.Name</a>
                            </li>
                            <li >
                                @foreach (var tertiaryCat in secondaryCat.Categories)
                                {
                                    <ul class="list-style-none" >
                                        <li>
                                            <a asp-route-primaryCat="@primaryCat.Name" asp-route-secondaryCat="@tertiaryCat.Name">@tertiaryCat.Name</a>
                                        </li>
                                    </ul>
                                }
                            </li>
                        </ul>
                    }
                }
            </div>
            <div class="options mt-5">
                @foreach (var optionGroup in Model.OptionGroups)
                {

                    <h4 class="d-block">@optionGroup.Name</h4>
                    <ul class="list-style-none">
                        @foreach (var option in optionGroup.Options)
                        {
                            <li>
                                <label class="custom-control custom-checkbox">
                                    <input type="checkbox" data-option-id="@option.Id" class="js-option-checkbox custom-control-input" @(Model.OptionIds.Contains(option.Id) ? "checked" : "")>
                                    <span class="custom-control-indicator"></span>
                                    <span class="custom-control-description">@option.Name</span>
                                </label>
                            </li>
                        }
                    </ul>
                }
            </div>
            <div class="sizes mt-5">
                @foreach (var sizeGroup in Model.SizeGroups)
                {
                    <h4 class="d-block">@sizeGroup.Name</h4>
                    <ul class="list-style-none">
                        @foreach (var size in sizeGroup.Sizes)
                        {
                            <li>
                                <label class="custom-control custom-checkbox">
                                    <input type="checkbox" data-size-id="@size.Id" class="js-size-checkbox custom-control-input" @(Model.SizeIds.Contains(size.Id) ? "checked" : "")>
                                    <span class="custom-control-indicator"></span>
                                    <span class="custom-control-description">@size.Name</span>
                                </label>
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
        <div class="col-lg-8">
            <div class="row" id="product-div">
                @foreach (var product in Model.Products)
                {
                    <div class="col-lg-4 p-2">
                        <div class="d-flex flex-column">
                            <img src="@product.MainSKUPicture.ImageUrl" data-alt-img="@product.AltSKUPicture.ImageUrl" class="product js-image-flip" />
                        </div>

                        <div class="text-md-center">@product.Name</div>
                        <div class="text-md-center">@product.Description</div>
                        <div class="text-md-center">@product.Price.ToString("C")</div>

                    </div>
                }
            </div>
            <div class="row d-flex flex-column" id="ajax-container">
            </div>
        </div>
    </div>
</div>
@section scripts{
    <script>

        //javascript way to parse query string
        @*const parser = new DOMParser;
        const dom = (parser.parseFromString("@(Model.CategoryQueryString)", 'text/html'));
        const categoryQueryString = dom.body.textContent;*@


        //asp.net way uses System.Web.HttpUtility.JavaScriptStringEncode(Model.CategoryQueryString)

        /*
        * Initialize URL and variables
        */
        let url =
            `@($"{Context.Request.Scheme}://{Context.Request.Host}{Context.Request.Path}?")`;

        //param names
        const primaryCategoryParamName = "@Model.PrimaryCategoryParamName";
        const secondaryCategoryParamName = "@Model.SecondaryCategoryParamName";
        const optionParamName = "@Model.OptionParamName";
        const sizeParamName = "@Model.SizeParamName";
        const pageParamName = "@Model.PageParamName";
        const perPageParamName = "@Model.PerPageParamName";


        // query strings
        const primaryCategory = "@Model.PrimaryCategory";
        const secondaryCategory = "@Model.SecondaryCategory";

        //Model values
        let page = @Model.Page + 1;
        const perPage = @Model.PerPage;


        // checkbox html elements
        const optionCheckboxes = document.querySelectorAll(".js-option-checkbox");
        const sizeCheckboxes = document.querySelectorAll(".js-size-checkbox");

        if (primaryCategory.length > 0) {
            url += `${primaryCategoryParamName}=${primaryCategory}`;
        }
        if (secondaryCategory.length > 0) {
            url += `&${secondaryCategoryParamName}=${secondaryCategory}`;
        }


        /*
        * AJAX Picture Loader class
        */
        class AjaxImageLoader {
            constructor(imageUrl, containerSelector) {
                //ajax Image initialize
                this.ajaxImage = document.createElement("img");
                this.ajaxImage.src = imageUrl;
                this.ajaxImage.style.width = "50px";
                this.ajaxImage.classList.add("mx-auto");

                //ajax text area
                this.ajaxText = document.createElement("div");
                this.ajaxText.classList.add("font-weight-bold");
                this.ajaxText.setAttribute("role", "alert");
                this.ajaxText.style.visibility = 'hidden';

                //container append
                this.container = document.querySelector(containerSelector);
                this.container.appendChild(this.ajaxImage);
                this.container.appendChild(this.ajaxText);
            }

            hideAjaxImage() {
                this.ajaxImage.style.visibility = 'hidden';
            }

            showAjaxImage() {
                this.ajaxImage.style.visibility = 'initial';
            }

            showTemporaryAjaxText(message, duration, classArray) {
                if (this.ajaxText.style.visibility === 'hidden') {
                    this.ajaxText.textContent = message;
                    this.ajaxText.style.visibility = 'initial';
                    classArray.forEach(className => {
                        this.ajaxText.classList.add(className);
                    });
                    setTimeout(() => {
                            this.ajaxText.style.visibility = 'hidden';
                        },
                        duration);
                }
            }
        }

        const ajaxImageLoader = new AjaxImageLoader("/images/ajax-loader.gif", "#ajax-container");
        ajaxImageLoader.hideAjaxImage();

        ////////////////////////////////////////////////////////////////////////////////////////////////

        // Returns a function, that, as long as it continues to be invoked, will not
        // be triggered. The function will be called after it stops being called for
        // N milliseconds. If `immediate` is passed, trigger the function on the
        // leading edge, instead of the trailing.
        function debounce(func, wait = 400, immediate = false) {
            var timeout;
            return function() {
                var context = this, args = arguments;
                var later = function() {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
            };
        };

        ////////////////////////////////////////////////////////////////////////////////////////////////


        /*
        * Gets the currently checked option checkboxes and returns a string (QueryString)
        */
        const GetCheckboxUrl = function(htmlCollectionOfCheckboxes, paramName, dataAttribute) {
            let checked = [];

            htmlCollectionOfCheckboxes.forEach(function(checkbox) {
                if (checkbox.checked) {
                    checked.push(checkbox.getAttribute(dataAttribute));
                }
            });

            let queryString = "";
            for (let i = 0; i < checked.length; i++) {
                queryString += `&${paramName}=${checked[i]}`;
            }
            return queryString;
        };

        ////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        * Gets the currently checked option checkboxes and returns a string (QueryString)
        */
        const GetCategoryUrl = function() {
            let categoryQueryString = "";
            if (primaryCategory.length > 0) {
                categoryQueryString = `${primaryCategoryParamName}=${primaryCategory}`;
            }
            if (secondaryCategory.length > 0) {
                categoryQueryString += `&${secondaryCategoryParamName}=${secondaryCategory}`;
            }
            return categoryQueryString;
        };

        ////////////////////////////////////////////////////////////////////////////////////////////////

        /*
       * Get the page and per page url
       */
        const GetPageAndPerPageUrl = function() {
            const pageAndPerPageQueryString = `&${pageParamName}=${page}&${perPageParamName}=${perPage}`;
            return pageAndPerPageQueryString;
        };

        ////////////////////////////////////////////////////////////////////////////////////////////////


        /*
        * Updates browsers Href with a new URL
        */
        const UpdateHref = function() {
            const optionQueryString = GetCheckboxUrl(optionCheckboxes, optionParamName, "data-option-id");
            const sizeQueryString = GetCheckboxUrl(sizeCheckboxes, sizeParamName, "data-size-id");
            window.location.href = `${url}${optionQueryString}${sizeQueryString}`;
        };

        ////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        * Contains the template for a product
        */
        const ProductTemplate = function(product) {
            return `<div class="col-lg-4 p-2">
                        <div class="d-flex flex-column">
                                <img src="${product.mainSKUPicture.imageUrl}" data-alt-img="${product.altSKUPicture
                .imageUrl}" class="product js-image-flip" />
                        </div>

                        <div class="text-md-center">${product.name}</div>
                        <div class="text-md-center">${product.description}</div>
                        <div class="text-md-center">$${product.price}</div>
                    </div>`;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////


        /*
        * Calls Ajax request to API to return JSON products
        */
        const AsyncGetProducts = function() {
            let url = "/api/products?";
            url += GetCategoryUrl();
            url += GetCheckboxUrl(optionCheckboxes, optionParamName, "data-option-id");
            url += GetCheckboxUrl(sizeCheckboxes, sizeParamName, "data-size-id");
            url += GetPageAndPerPageUrl();
            console.log(url);
            ajaxImageLoader.showAjaxImage();
            $.ajax({
                url: url,
                type: "GET",
                success: function(json) { //data represents a JSON obejct
                    ajaxImageLoader.hideAjaxImage();
                    page = json.nextPage;
                    json.products.forEach(product => $("#product-div").append(ProductTemplate(product)));
                },
                error: function(httpResponse) { //data represents a HTTP response, which has a responseJSON
                    ajaxImageLoader.hideAjaxImage();
                    ajaxImageLoader.showTemporaryAjaxText(httpResponse.responseJSON.error,
                        3000,
                        ["alert", "alert-warning", "font-weight-bold"]);
                }
            });


        }

        ////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        * Determines if the screen has been scrolled to the bottom, and then calls AsyncGetProducts
        */
        const AjaxScrollListener = function() {
            if (window.scrollY + 200 >= (document.body.scrollHeight - window.innerHeight)) {
                AsyncGetProducts();
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////


        /*
        * Flips product image to the alternate picture
        */
        const FlipProductImage = function(targetImage) {
            if (targetImage) {
                const tempImageUrl = targetImage.src;
                targetImage.src = targetImage.dataset.altImg;
                targetImage.dataset.altImg = tempImageUrl;
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////

        //EVENT LISTENERS

        //checkboxes
        optionCheckboxes.forEach(checkbox => checkbox.addEventListener("change", UpdateHref, false));
        sizeCheckboxes.forEach(checkbox => checkbox.addEventListener("change", UpdateHref, false));

        //Ajax infinity scroll
        document.addEventListener("scroll", debounce(AjaxScrollListener), false);

        //product image flip
        document.querySelector("#product-div").addEventListener("mouseover",
            function(event) {
                if (event.target.classList.contains("js-image-flip")) {
                    FlipProductImage(event.target);
                }
            });

        document.querySelector("#product-div").addEventListener("mouseout",
            function(event) {
                if (event.target.classList.contains("js-image-flip")) {
                    FlipProductImage(event.target);
                }
            });


    </script>
}